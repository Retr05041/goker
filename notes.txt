Papers:

Original: https://people.csail.mit.edu/rivest/pubs/SRA81.pdf

Mental Poker in the age of Snarks: https://geometry.xyz/notebook/mental-poker-in-the-age-of-snarks-part-1

Mental Poker Toolkit: https://vladris.com/mental-poker-toolkit/

Libraries:

P2P Networking: https://docs.libp2p.io/guides/getting-started/go/
Command pattern: https://refactoring.guru/design-patterns/command/go/example

---

Might want to implement SRA as the commutative encryption algorithm... More research is required.

Also need a data structure for holding the game state that will be the same for every client, a struct / append only list of moves?


Video explaining the crypto problem better: https://www.youtube.com/watch?v=mthPiiCS24A


Commutative encryption: https://asecuritysite.com/rsa/comm2

A Multiparty Homomorphic Encryption Library in Go: https://homomorphicencryption.org/wp-content/uploads/2020/12/wahc20_demo_christian.pdf

Possible zero knowledge proof library: https://pkg.go.dev/github.com/0xdecaf/zkrp#readme-bulletproofs-example

Tims suggestions:

for if I need multiple keys
multi keys are straight forward : blinding factor - Multiply by r... do operations... then easily retroactively figure out what value I will need to divide by to get
my value back... - STRAIGHT FORWARD TO MAKE VARIATIONS

m^e = c is cipher txt
C^d = m^ed = m

m^e * r = c (new cipher text)
c^d = m^ed * r^d = m * r^d

r^-d (no division needed)

it's a trick (any keypar, moduolate it to make it "unique" all you need to do is come up with a unique value)

I NEED TO DO THIS - ONE KEY VALUE PAIR FOR EACH CARD - but each is a "variation" of the global key

shuffle + apply keys * each person

keep order of the deck forever (52 keys which are variations) - key index 0 is card index 0

apply encryption to every card - take away old non variation keyset - NO ONE SHUFFLES DURING THIS STAGE

if I take a card I simply announce it and everyone gives me the key materials to decrypt the card

Time locking should reveal the key that I am using...? What is in the timelock? - fiven a "pair" of things
given e and R^-d ? it doesnt matter, because it can be represented as a bit string, if it's too small use padding
Have an intermediate step c0 -> x0 -> t0 
x is a symmetrically encrypted cipher text (smaller 200 bits or smth like that) - will be long key, give that resulting cipher text, that smaller key can be time locked
x would hold all the information to break the card (not the actual key for the card itself) - don't have to worry about size anymore..

52 symmetrically encryption using key K - key k will get time locked and sent to everyone - as we should only break it post game anyway!!!

Protocol problems:

after a hand is over, people need to reviel their key K (time locked secret) and give the neccessary information that it was k that was time locked and that k can decrytp
symmetric ones and taht the symmetric ones did indeed contain the material to decrypt the cards (the global key variations) - BECAUSE SOMEONE COULD LIE THEN NO ONE CAN EVER
SEE THE ORIGNAL CARD - if it is revealed afterwords, people can verify if it made sense (if yes then all good, if no then a person attempted to cheat - invalid hand)
not a zero knowldge proof - but could definitly be used prior if I want a high mark lol

Verification is important

K is symmetric - time locked - will have decryption key for C and 

encrypt deck with SRA - every card will have a sequence of keys associated to it
if to a person everyone will publish their value but the one needing it

any face up card needs all

every individual will also publish a ciphertext which will a table of private keys for each card (k) - after the hand you have to publish all info for k so others can verify

For P, Q, and PHI - do some digging (Tim might do some research, there is an "elegant trick" to it)

---

---

More papers on commutative encryption SRA:
Using Commutative Encryption to Share a Secret - https://eprint.iacr.org/2008/356.pdf
- Talks about using DLP (discrete logarithm problem) which is what I am using


Lot's of juice material on Time locked puzzles:
Versatile and Sustainable Timed-Release Encryption and Sequential Time-Lock Puzzles - https://eprint.iacr.org/2020/739.pdf
- References good uses of TLP, and papers around it


OG paper on Time-lock puzzles: https://people.csail.mit.edu/rivest/pubs/RSW96.pdf

---

My idea for key time locked:
bundle global private and public key and all r's (variation numbers) into a payload, encrypt with a symmetric key, and time lock that key
send puzzle (key) and payload (encrypted with AES) to peer
once broken, they can construct all variations and decrypt the cards

--- INTERIM NOTES

Make related work it's own section

Don't make motivation a subsection - start with it

make aims and objectives a subsection

Introduction:
remove "client" from introduction "distrobuted poker client"
"Why do you use commutative encryption and time locking"
"empahsize secure" - You don't want anyone to influence the randomness or read the cards prematurely, hence the commutative encryption (Don't have to say this in my aim)
same story for time locking (robustness) - wanna be secure against people that could collude by having one person pull out, cause you can't compute the following hands (could be someone else whos benifiting from it)
DEFEND THIS!

1. SRA encryption TO shuffle the deck
2. Goal for time locked puzzles (of what? Secret for SRA...)
3. Reference command design pattern..

Related work:
More extensive for dissertation...
Beef it up a bit if I can
"Verify delay function" VDF
Doesn't need to be that related... (some are used in the introduction)
loosen the notion of related work - papers, other stuff being implemented in SRA, timelocking, other applications of mental poker
"Bezentine fault tolerance" - HINT (besentine generals problem)
"Intention is not important" - in relation to the problem above and my problem
IF I CAN DO THIS FOR INTERIM THEN GREATE - is needed for diss no matter what...

Encryption Design
Talk about how you CANNOT share the public key (that also differes from RSA)
Discrete logarithm problem 
RSA problem: 1 no one can compute descrete logarithm, and no one can compute d from e
SRA problem: Just descrete logarithm problem

Instead just define SRA (first 5 steps are correct), just the end


MAKE DESCRIPTION OF WORK IT'S OWN SECTION (call it approach?)
1.3 is supposed to be a lot more concise, take what I put for there and put it somewhere else.
"We need to have an implementation of this this and that"
"User interface, where you can play poker, and a backend that can handle poker hands and handle encryption"
very short description of what my tool does
1.3 can be design (it's own section)
Restructure to be more explicite

Don't need "description of the work"


Techqnue meant to apply - methodology
design or approach - 1.3

show correlation for clockspeed and timelock (for dissertation) (site those who have done it)

Contributions and Relections:
This part of the program took a bit longer than expected, - Don't say this
Just say what I have done.
Talk about possible challenges I went through - if they were interesting


All information is there, just do a restructuring 
section 3 (which might become section 4 or 5) I talk about what I have already done



----------

NO NEED TO SHUFFLE ONCE DURING SECOND ROUND OF ENCRYPTION
i.e. Don't link r's to cards until I have gotten the shuffled deck





